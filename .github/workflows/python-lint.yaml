name: Lint and Type Check

on:
  push:
  pull_request:

jobs:
  black:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Black
        run: pip install black

      - name: Check Black Installation
        run: black --version

      - name: Run Black (code formatting)
        run: black --check --diff .

  flake8:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Flake8
        run: pip install flake8

      - name: Check Flake8 Installation
        run: flake8 --version

      - name: Run Flake8 (style check)
        run: flake8 .

  mypy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Mypy and PySpark
        run: pip install mypy pyspark

      - name: Check Mypy Installation
        run: mypy --version

      - name: Create Mypy Config
        run: |
          echo "[mypy]" > mypy.ini
          echo "ignore_missing_imports = True" >> mypy.ini

      - name: Run Mypy (type checking)
        run: mypy .

  pylint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Pylint and PySpark
        run: pip install --upgrade pylint==2.17.4 pyspark

      - name: Check Pylint Installation
        run: pylint --version

      - name: Run Pylint (code analysis)
        run: pylint --output-format=parseable $(git ls-files '*.py')

run-spark:
  runs-on: ubuntu-latest
  steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Fetch all history

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install PySpark
      run: pip install pyspark

    - name: Get modified Python and PySpark files
      id: changed-files
      shell: bash
      run: |
        # Use github.event.pull_request.base.sha para PRs, ou HEAD para pushes
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
        else
          BASE_SHA=$(git rev-parse HEAD^1) # Parent of the HEAD commit for pushes
        fi

        FILES=$(git diff --name-only $BASE_SHA HEAD -- '*.py' '*.pyspark')

        if [[ -z "$FILES" ]]; then
          echo "Nenhum arquivo Python ou PySpark foi modificado. Abortando..."
          exit 0 # Sa√≠da 0 para indicar sucesso (nenhum arquivo alterado)
        fi

        echo "::set-output name=files::$FILES"
        echo "Arquivos modificados: $FILES"

    - name: Run modified Python and PySpark scripts
      if: steps.changed-files.outputs.files != '' # Condicional para evitar erro se $FILES for vazio
      run: |
        for file in ${{ steps.changed-files.outputs.files }}; do
          echo "Running $file..."
          # Execute com pyspark se for arquivo pyspark
          if [[ "$file" == *.pyspark ]]; then
             pyspark "$file" || { echo "Erro detectado no arquivo: $file"; exit 1; }
          else
            python "$file" || { echo "Erro detectado no arquivo: $file"; exit 1; }
          fi
        done
